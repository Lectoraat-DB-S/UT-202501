{
    "CHUNKSIZE": 1048576,
    "COMPRESSION": true,
    "TIMEOUT": "PT10S",
    "scopeConfigs": {
        "HMI_Scope": {
            "AUTOSTART_RECORD": true,
            "CONFIG_FILE": "﻿<?xml version="1.0" encoding="utf-8"?>
<ScopeProject AssemblyName="TwinCAT.Measurement.Scope.API.Model">
  <ActiveWorkfolderPath>C:\Users\Jonathan\FvdT-Repo\Database_Connection\HMI Scope\ScopeWizard 632305779</ActiveWorkfolderPath>
  <AutoDeleteCapacity>0</AutoDeleteCapacity>
  <AutoDeleteMode>Disabled</AutoDeleteMode>
  <AutoDeleteOlderThan>0</AutoDeleteOlderThan>
  <AutoRestartRecord>false</AutoRestartRecord>
  <AutoSaveExportConfigurationString>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;ExportConfiguration&gt;
  &lt;Silent&gt;False&lt;/Silent&gt;
  &lt;Format_Properties&gt;
	&lt;CSVProperties&gt;
	&lt;/CSVProperties&gt;
  &lt;/Format_Properties&gt;
&lt;/ExportConfiguration&gt;
</AutoSaveExportConfigurationString>
  <AutoSaveFileNameMask>{SCOPE}_AutoSave_{HH_mm_ss}</AutoSaveFileNameMask>
  <AutoSaveMode>None</AutoSaveMode>
  <AutoSavePath>$ScopeProject$\AutoSave</AutoSavePath>
  <Comment />
  <DisplayColor>Black</DisplayColor>
  <Guid>e91176ba-2ea1-4e3d-8bd6-e227944052f4</Guid>
  <HeadlessServer />
  <HeadlessServerConnectionId>00000000-0000-0000-0000-000000000000</HeadlessServerConnectionId>
  <ImageAutoDeleteCapacity>0</ImageAutoDeleteCapacity>
  <ImageAutoDeleteOlderThan>0</ImageAutoDeleteOlderThan>
  <ImagesDeleteMode>Disabled</ImagesDeleteMode>
  <KeepPreviousExports>false</KeepPreviousExports>
  <KeepPreviousImageExports>false</KeepPreviousImageExports>
  <Layout>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;Layout&gt;
  &lt;Window Guid="4e9fbd0c-64aa-40b6-a78b-95f369ece1bf" LastFocused="133915157605003498" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="0c943b05-6ae5-4e24-a570-83e3e811aa37" DocumentIndexInWindowGroup="2" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;Window Guid="c072b9b6-59d6-49d2-9203-a9e9b4111df4" LastFocused="133915163301759187" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="0c943b05-6ae5-4e24-a570-83e3e811aa37" DocumentIndexInWindowGroup="0" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;Window Guid="6693190d-ebdd-43c3-8a18-434433778d99" LastFocused="133915163272379922" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="0c943b05-6ae5-4e24-a570-83e3e811aa37" DocumentIndexInWindowGroup="1" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;DocumentContainer Dock="5"&gt;
    &lt;SplitLayoutSystem WorkingSize="250, 400" SplitMode="0"&gt;
      &lt;ControlLayoutSystem WorkingSize="250, 400" Guid="0c943b05-6ae5-4e24-a570-83e3e811aa37" Collapsed="0" SelectedControl="c072b9b6-59d6-49d2-9203-a9e9b4111df4"&gt;
        &lt;Controls&gt;
          &lt;Control Guid="c072b9b6-59d6-49d2-9203-a9e9b4111df4" /&gt;
          &lt;Control Guid="6693190d-ebdd-43c3-8a18-434433778d99" /&gt;
          &lt;Control Guid="4e9fbd0c-64aa-40b6-a78b-95f369ece1bf" /&gt;
        &lt;/Controls&gt;
      &lt;/ControlLayoutSystem&gt;
    &lt;/SplitLayoutSystem&gt;
  &lt;/DocumentContainer&gt;
&lt;/Layout&gt;</Layout>
  <MainServer>127.0.0.1.1.1</MainServer>
  <Name>Scope Project</Name>
  <RecordTime>6000000000</RecordTime>
  <ServerVersions>
    <Version>4.49.84.0</Version>
  </ServerVersions>
  <SortPriority>100</SortPriority>
  <StopMode>AutoStop</StopMode>
  <SubMember>
    <TriggerModule AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>b5be1465-fc4d-4629-aa52-17ce3cd8472f</Guid>
      <Name>Trigger</Name>
      <SortPriority>10000</SortPriority>
      <SubMember />
      <Title>MeasurementMemberBase</Title>
    </TriggerModule>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-1118478</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-14803426</ForeColor>
      <Guid>6693190d-ebdd-43c3-8a18-434433778d99</Guid>
      <LayerEndConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</LayerEndConnectedTimeMemberGuid>
      <LayerEndTimeRefreshMode>NoTime</LayerEndTimeRefreshMode>
      <LayerEndTimestamp>0</LayerEndTimestamp>
      <LayerEndTriggerGroupOffset>0</LayerEndTriggerGroupOffset>
      <LayerLength>0</LayerLength>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>Encoder</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>10</SortPriority>
      <SubMember>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>785186b1-79aa-4b0f-993a-feef60326441</Guid>
          <Name>Chart Style</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>false</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>48342b48-c2ae-479e-9acb-ee3d36319648</Guid>
              <Name>Chartzoom Style</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>96662de9-a33f-4186-bac1-c581d5dcf711</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>MeasurementMemberBase</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>true</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>MeasurementMemberBase</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <ForeColor>-14803426</ForeColor>
          <Guid>de8532ac-8116-4e74-ada9-2e8cadbabce1</Guid>
          <Name>Overview Chart</Name>
          <OverviewVisible>true</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>MeasurementMemberBase</Title>
        </OverviewChart>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>4e582a0b-915e-4a5a-8289-09d35f286f2b</Guid>
          <Name>Axis Group</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <AbsoluteTimesFormat>HH:mm:ss.fff</AbsoluteTimesFormat>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>d620530c-d9f3-4bb9-810d-f1e00eb94c05</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <ShowAbsoluteTimes>None</ShowAbsoluteTimes>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>11069503-696f-4d85-9ff4-1e92d0744e2c</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>None</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>MeasurementMemberBase</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>5459df12-3c36-4336-b424-b9c2a7b19462</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowOnly</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>c2343350-7635-4a42-af43-7ac297063047</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (1)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>AllChannels</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>MeasurementMemberBase</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Value Axis</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>8f256802-f0ae-46db-b99c-10357ea67f3c</Guid>
              <Name>Marker Container</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MeasurementMemberBase</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16744448</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>83048ac5-04d4-4f23-b78b-585dcb7b6653</Guid>
              <Name>iEncoderValue</Name>
              <SortPriority>10</SortPriority>
              <SubMember>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>45179167-4adc-4ed2-97df-4d5df978f1df</Guid>
                  <Name>Channel Style</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16744448</DisplayColor>
                      <FillColor>838893568</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>b9dca89b-8d51-4e8d-a253-896ff27863d7</Guid>
                      <LineWidth>2</LineWidth>
                      <MarkColor>-16744448</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>055782ce-6912-46a1-a53b-2b00f50233e3</Guid>
                      <Name>Min/Max Style</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>11a7608f-2e52-4b2f-be3e-fd83ed693ff0</Guid>
                      <Name>MeasurementMemberBase</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>MeasurementMemberBase</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
                <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DetailLevel>
                    <Int32>0</Int32>
                  </DetailLevel>
                  <DisplayColor>Black</DisplayColor>
                  <Guid>4e8f2213-ae06-4614-9ad6-900db32e0030</Guid>
                  <Name>MeasurementMemberBase</Name>
                  <SortPriority>100</SortPriority>
                  <Title>MeasurementMemberBase</Title>
                  <UsedNameType>Acquisition</UsedNameType>
                </NameRelationInfo>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>91defe85-cc69-49b6-a699-8e94a634a043</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>20c9538a-26a5-4c94-93d2-1241b492d2d4</Guid>
                  <Name>Y: iEncoderValue</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString></SourceUnitString>
                      <Symbol>1</Symbol>
                      <TargetUnitString></TargetUnitString>
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember>
                    <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DetailLevel>
                        <Int32>0</Int32>
                      </DetailLevel>
                      <DisplayColor>Black</DisplayColor>
                      <Guid>248023fa-ea84-4861-a33c-7a558d445cf9</Guid>
                      <Name>MeasurementMemberBase</Name>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                      <UsedNameType>Acquisition</UsedNameType>
                    </NameRelationInfo>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
              </SubMember>
              <Title>MeasurementMemberBase</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
        <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <Guid>c4f1a7fd-1660-4918-ba9e-9d6b39d55b7e</Guid>
          <Name>Marker Container (1)</Name>
          <SortPriority>100</SortPriority>
          <SubMember />
          <Title>MeasurementMemberBase</Title>
        </MarkerContainer>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>MeasurementMemberBase</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
    <DataPool AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>e6362251-0be4-4a7d-bcfb-34d9cc7e14e6</Guid>
      <Name>DataPool</Name>
      <SortPriority>0</SortPriority>
      <SubMember>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>10.100.5.10.1.1</AmsNetId>
          <Area>None</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>100000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>UINT32</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>1</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>91defe85-cc69-49b6-a699-8e94a634a043</Guid>
          <IndexGroup>61472</IndexGroup>
          <IndexOffset>434252</IndexOffset>
          <IsEvent>false</IsEvent>
          <IsHistorical>false</IsHistorical>
          <IsTimeline>false</IsTimeline>
          <Name>iEncoderValue</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString></SourceUnitString>
              <Symbol>1</Symbol>
              <TargetUnitString></TargetUnitString>
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubAdsAcquisition />
          <SubMember>
            <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DetailLevel>
                <Int32>0</Int32>
              </DetailLevel>
              <DisplayColor>Black</DisplayColor>
              <Guid>770b6dbd-937e-4cf9-ab72-3f976f1abc1d</Guid>
              <Name>MeasurementMemberBase</Name>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <UsedNameType>DetailLevel</UsedNameType>
            </NameRelationInfo>
          </SubMember>
          <SymbolBased>true</SymbolBased>
          <SymbolName>MAIN.iEncoderValue</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>MeasurementMemberBase</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>4</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>10.100.5.10.1.1</AmsNetId>
          <Area>Local</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>100000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL64</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>2</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>497a331e-0a39-4658-a369-ff82df09da5d</Guid>
          <IndexGroup>16448</IndexGroup>
          <IndexOffset>438336</IndexOffset>
          <IsEvent>false</IsEvent>
          <IsHistorical>false</IsHistorical>
          <IsTimeline>false</IsTimeline>
          <Name>iEncoderDegrees</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString></SourceUnitString>
              <Symbol>1</Symbol>
              <TargetUnitString></TargetUnitString>
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubAdsAcquisition />
          <SubMember>
            <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DetailLevel>
                <Int32>0</Int32>
              </DetailLevel>
              <DisplayColor>Black</DisplayColor>
              <Guid>b6763a3b-d77e-46b2-a93c-0c003b702343</Guid>
              <Name>MeasurementMemberBase</Name>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <UsedNameType>DetailLevel</UsedNameType>
            </NameRelationInfo>
          </SubMember>
          <SymbolBased>true</SymbolBased>
          <SymbolName>MAIN.iEncoderDegrees</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>MeasurementMemberBase</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>8</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>10.100.5.10.1.1</AmsNetId>
          <Area>Input</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>100000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>INT16</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>3</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>ee9556f2-a21a-4892-b492-d5ed04841a50</Guid>
          <IndexGroup>61472</IndexGroup>
          <IndexOffset>434258</IndexOffset>
          <IsEvent>false</IsEvent>
          <IsHistorical>false</IsHistorical>
          <IsTimeline>false</IsTimeline>
          <Name>iCapacitiefValue </Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString />
              <Symbol>1</Symbol>
              <TargetUnitString />
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString />
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension />
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubAdsAcquisition />
          <SubMember>
            <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DetailLevel>
                <Int32>0</Int32>
              </DetailLevel>
              <DisplayColor>Black</DisplayColor>
              <Guid>f42c31ae-ab95-4680-8253-fa9ddd8fa55e</Guid>
              <Name>MeasurementMemberBase</Name>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <UsedNameType>Custom</UsedNameType>
            </NameRelationInfo>
          </SubMember>
          <SymbolBased>true</SymbolBased>
          <SymbolName>MAIN.iCapacitiefValue</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>MeasurementMemberBase</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>2</VariableSize>
        </AdsAcquisition>
      </SubMember>
      <Title>MeasurementMemberBase</Title>
    </DataPool>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-1118478</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-14803426</ForeColor>
      <Guid>c072b9b6-59d6-49d2-9203-a9e9b4111df4</Guid>
      <LayerEndConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</LayerEndConnectedTimeMemberGuid>
      <LayerEndTimeRefreshMode>NoTime</LayerEndTimeRefreshMode>
      <LayerEndTimestamp>0</LayerEndTimestamp>
      <LayerEndTriggerGroupOffset>0</LayerEndTriggerGroupOffset>
      <LayerLength>0</LayerLength>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>Capacitief</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>11</SortPriority>
      <SubMember>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <ForeColor>-14803426</ForeColor>
          <Guid>e8ed05af-83ce-49ab-bcbb-1e1cdeb06c53</Guid>
          <Name>Overview Chart (1)</Name>
          <OverviewVisible>true</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>MeasurementMemberBase</Title>
        </OverviewChart>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>c7d98234-6bca-4462-a0a6-645614d8536a</Guid>
          <Name>Chart Style (1)</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>false</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>6f98f1d3-e63d-4198-824d-ba7b268e68ea</Guid>
              <Name>Chartzoom Style (1)</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>058bf439-b083-45dc-a7d9-fe01e71824ae</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style (1)</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>MeasurementMemberBase</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>true</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>MeasurementMemberBase</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <Guid>8597a9fe-885e-44ed-842e-f1833090a0b8</Guid>
          <Name>Marker Container (2)</Name>
          <SortPriority>100</SortPriority>
          <SubMember />
          <Title>MeasurementMemberBase</Title>
        </MarkerContainer>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>c511101d-e6c9-405f-be1c-058e737d7340</Guid>
          <Name>Axis Group (1)</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <AbsoluteTimesFormat>HH:mm:ss.fff</AbsoluteTimesFormat>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>30b83fd7-c854-4d8e-af59-950a926ab450</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis (1)</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <ShowAbsoluteTimes>None</ShowAbsoluteTimes>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>a4ef0dd4-0dd2-4819-988b-9bdf2fdb471a</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (2)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>None</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>MeasurementMemberBase</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>3a23da0d-02e0-49ab-9f6d-f8141e7485f3</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis (1)</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowOnly</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>c5f9e4e9-dd91-4021-95fc-e2f5c127e30e</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (3)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>AllChannels</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>MeasurementMemberBase</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Value Axis</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>36ac86e6-cdad-4c88-964b-d80b917cc8f8</Guid>
              <Name>Marker Container (3)</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MeasurementMemberBase</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16711936</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>9f00097e-3dcb-4278-bfbf-ddd639309bf8</Guid>
              <Name>iCapacitiefValue </Name>
              <SortPriority>11</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>ee9556f2-a21a-4892-b492-d5ed04841a50</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>56b7f37e-8740-4a12-b2ed-eacf46561155</Guid>
                  <Name>Y: iCapacitiefValue </Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString />
                      <Symbol>1</Symbol>
                      <TargetUnitString />
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString />
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension />
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember>
                    <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DetailLevel>
                        <Int32>0</Int32>
                      </DetailLevel>
                      <DisplayColor>Black</DisplayColor>
                      <Guid>cd2df07b-02ff-4d82-89be-ddc00382be2d</Guid>
                      <Name>MeasurementMemberBase</Name>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                      <UsedNameType>Acquisition</UsedNameType>
                    </NameRelationInfo>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>e5ae5dd8-abac-46f5-b815-bff1f7c81c2b</Guid>
                  <Name>Channel Style (3)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16711936</DisplayColor>
                      <FillColor>838926080</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>453ca55d-de8a-42b7-8f4d-e1e8bd5ab84e</Guid>
                      <LineWidth>2</LineWidth>
                      <MarkColor>-16711936</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (3)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>7487bcf3-d96e-46d3-b18c-982474aa5ef4</Guid>
                      <Name>Min/Max Style (3)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>0175d812-92a0-4299-8bda-6baf42fe4f44</Guid>
                      <Name>MeasurementMemberBase (3)</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>MeasurementMemberBase</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
                <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DetailLevel>
                    <Int32>0</Int32>
                  </DetailLevel>
                  <DisplayColor>Black</DisplayColor>
                  <Guid>8d9afb36-b800-45db-9673-b6cf15a5427a</Guid>
                  <Name>MeasurementMemberBase</Name>
                  <SortPriority>100</SortPriority>
                  <Title>MeasurementMemberBase</Title>
                  <UsedNameType>Acquisition</UsedNameType>
                </NameRelationInfo>
              </SubMember>
              <Title>MeasurementMemberBase</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>MeasurementMemberBase</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-1118478</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-14803426</ForeColor>
      <Guid>4e9fbd0c-64aa-40b6-a78b-95f369ece1bf</Guid>
      <LayerEndConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</LayerEndConnectedTimeMemberGuid>
      <LayerEndTimeRefreshMode>NoTime</LayerEndTimeRefreshMode>
      <LayerEndTimestamp>0</LayerEndTimestamp>
      <LayerEndTriggerGroupOffset>0</LayerEndTriggerGroupOffset>
      <LayerLength>0</LayerLength>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>Encoder Graden</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>12</SortPriority>
      <SubMember>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <ForeColor>-14803426</ForeColor>
          <Guid>41d102d3-356f-40b3-99e6-9623fb233f93</Guid>
          <Name>Overview Chart (2)</Name>
          <OverviewVisible>true</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>MeasurementMemberBase</Title>
        </OverviewChart>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>de1cc549-6226-41d3-9938-b935a532f5c9</Guid>
          <Name>Chart Style (2)</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>false</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>1f3e95b8-99a5-4b44-8757-9a9e40b2ce0e</Guid>
              <Name>Chartzoom Style (2)</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>4dd226aa-18cd-4b00-afb8-b33a5e84ac7d</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style (2)</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>MeasurementMemberBase</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>true</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>MeasurementMemberBase</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <Guid>dba4b076-27d4-4fff-b1fd-cfa2346711d3</Guid>
          <Name>Marker Container (4)</Name>
          <SortPriority>100</SortPriority>
          <SubMember />
          <Title>MeasurementMemberBase</Title>
        </MarkerContainer>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>568acecd-956e-48a3-8ad7-c30ad70cedb6</Guid>
          <Name>Axis Group (2)</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-23296</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>ca2e1cfb-4f4f-4622-b118-b08208b4ba77</Guid>
              <Name>iEncoderDegrees</Name>
              <SortPriority>10</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>497a331e-0a39-4658-a369-ff82df09da5d</AcquisitionGUID>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>950379ae-06d2-4807-afc7-c2962c61478f</Guid>
                  <Name>Y: iEncoderDegrees</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString></SourceUnitString>
                      <Symbol>1</Symbol>
                      <TargetUnitString></TargetUnitString>
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember>
                    <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DetailLevel>
                        <Int32>0</Int32>
                      </DetailLevel>
                      <DisplayColor>Black</DisplayColor>
                      <Guid>cfda3d3c-c92f-4f7c-8000-d60fb2c134b0</Guid>
                      <Name>MeasurementMemberBase</Name>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                      <UsedNameType>Acquisition</UsedNameType>
                    </NameRelationInfo>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>acf87463-38b8-4479-b0e8-1fd6567c0ae7</Guid>
                  <Name>Channel Style (2)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-23296</DisplayColor>
                      <FillColor>855614720</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>a837eca7-fe39-4dc0-a0b7-c02b7d9e8975</Guid>
                      <LineWidth>2</LineWidth>
                      <MarkColor>-23296</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (2)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>da00f534-d376-4f8f-8316-98682782bd7e</Guid>
                      <Name>Min/Max Style (2)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>4c12427b-34c0-41c1-9045-a0ca4901e54f</Guid>
                      <Name>MeasurementMemberBase (2)</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>MeasurementMemberBase</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
                <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DetailLevel>
                    <Int32>0</Int32>
                  </DetailLevel>
                  <DisplayColor>Black</DisplayColor>
                  <Guid>870f2c1a-72a4-4ab3-951c-d1dffd3994f0</Guid>
                  <Name>MeasurementMemberBase</Name>
                  <SortPriority>100</SortPriority>
                  <Title>MeasurementMemberBase</Title>
                  <UsedNameType>Acquisition</UsedNameType>
                </NameRelationInfo>
              </SubMember>
              <Title>MeasurementMemberBase</Title>
            </Channel>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <AbsoluteTimesFormat>HH:mm:ss.fff</AbsoluteTimesFormat>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>53b9794e-e6d5-4ea6-a0fd-6c13bcc48b84</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis (2)</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <ShowAbsoluteTimes>None</ShowAbsoluteTimes>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>fab0187c-42ce-42c4-9c2e-e507104fceb4</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (4)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>None</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>MeasurementMemberBase</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>8eb20f91-5e72-4b2a-8fbe-410dbcdff131</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis (2)</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowOnly</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>89e871bb-3d73-4582-9d20-bac07cabd3fa</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (5)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>AllChannels</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>MeasurementMemberBase</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Value Axis</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>45565c57-21d0-48dd-b770-c51d968e4fed</Guid>
              <Name>Marker Container (5)</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MeasurementMemberBase</Title>
            </MarkerContainer>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>MeasurementMemberBase</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
  </SubMember>
  <SynchronisationMode>Default</SynchronisationMode>
  <TargetConnectionIds />
  <Title>MeasurementMemberBase</Title>
  <UseAutoSave>false</UseAutoSave>
  <UseFileStore>true</UseFileStore>
  <Version>1.0.0.5</Version>
  <ViewDetailLevel>Default</ViewDetailLevel>
</ScopeProject>"
        }
    },
    "scopeRecords": []
}