{
    "CHUNKSIZE": 1048576,
    "COMPRESSION": true,
    "TIMEOUT": "PT10S",
    "scopeConfigs": {
        "HMIScope": {
            "AUTOSTART_RECORD": true,
            "CONFIG_FILE": "﻿<?xml version="1.0" encoding="utf-8"?>
<ScopeProject AssemblyName="TwinCAT.Measurement.Scope.API.Model">
  <ActiveWorkfolderPath>C:\Users\NavesM\source\repos\UT-202501\Database_Connection\ScopeControl\ScopeWizard 2028759600</ActiveWorkfolderPath>
  <AutoDeleteCapacity>0</AutoDeleteCapacity>
  <AutoDeleteMode>Disabled</AutoDeleteMode>
  <AutoDeleteOlderThan>0</AutoDeleteOlderThan>
  <AutoRestartRecord>false</AutoRestartRecord>
  <AutoSaveExportConfigurationString>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;ExportConfiguration&gt;
  &lt;Silent&gt;False&lt;/Silent&gt;
  &lt;Format_Properties&gt;
	&lt;CSVProperties&gt;
	&lt;/CSVProperties&gt;
  &lt;/Format_Properties&gt;
&lt;/ExportConfiguration&gt;
</AutoSaveExportConfigurationString>
  <AutoSaveFileNameMask>{SCOPE}_AutoSave_{HH_mm_ss}</AutoSaveFileNameMask>
  <AutoSaveMode>None</AutoSaveMode>
  <AutoSavePath>$ScopeProject$\AutoSave</AutoSavePath>
  <Comment />
  <DisplayColor>Black</DisplayColor>
  <Guid>0b6e2a90-3082-4012-9684-43a73507a2b2</Guid>
  <HeadlessServer />
  <HeadlessServerConnectionId>00000000-0000-0000-0000-000000000000</HeadlessServerConnectionId>
  <ImageAutoDeleteCapacity>0</ImageAutoDeleteCapacity>
  <ImageAutoDeleteOlderThan>0</ImageAutoDeleteOlderThan>
  <ImagesDeleteMode>Disabled</ImagesDeleteMode>
  <KeepPreviousExports>false</KeepPreviousExports>
  <KeepPreviousImageExports>false</KeepPreviousImageExports>
  <Layout>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;Layout&gt;
  &lt;Window Guid="dad457ad-e5ab-4b85-a67f-295675ccaf3b" LastFocused="133954081517195207" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="e9ff3a2d-be7a-4b9e-b019-f5cd7415f066" DocumentIndexInWindowGroup="1" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;Window Guid="057d0495-d28b-49c0-995b-e854e77336f3" LastFocused="133954081544132847" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="e9ff3a2d-be7a-4b9e-b019-f5cd7415f066" DocumentIndexInWindowGroup="0" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;DocumentContainer Dock="5"&gt;
    &lt;SplitLayoutSystem WorkingSize="250, 400" SplitMode="0"&gt;
      &lt;ControlLayoutSystem WorkingSize="250, 400" Guid="e9ff3a2d-be7a-4b9e-b019-f5cd7415f066" Collapsed="0" SelectedControl="057d0495-d28b-49c0-995b-e854e77336f3"&gt;
        &lt;Controls&gt;
          &lt;Control Guid="057d0495-d28b-49c0-995b-e854e77336f3" /&gt;
          &lt;Control Guid="dad457ad-e5ab-4b85-a67f-295675ccaf3b" /&gt;
        &lt;/Controls&gt;
      &lt;/ControlLayoutSystem&gt;
    &lt;/SplitLayoutSystem&gt;
  &lt;/DocumentContainer&gt;
&lt;/Layout&gt;</Layout>
  <MainServer>127.0.0.1.1.1</MainServer>
  <Name>Scope Project</Name>
  <RecordTime>36000000000</RecordTime>
  <ServerVersions>
    <Version>4.49.94.0</Version>
  </ServerVersions>
  <SortPriority>100</SortPriority>
  <StopMode>AutoStop</StopMode>
  <SubMember>
    <TriggerModule AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>d09f04a3-13e8-4951-be35-27cdd8b848f9</Guid>
      <Name>Trigger</Name>
      <SortPriority>10000</SortPriority>
      <SubMember />
      <Title>MeasurementMemberBase</Title>
    </TriggerModule>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-1118478</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-14803426</ForeColor>
      <Guid>057d0495-d28b-49c0-995b-e854e77336f3</Guid>
      <LayerEndConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</LayerEndConnectedTimeMemberGuid>
      <LayerEndTimeRefreshMode>NoTime</LayerEndTimeRefreshMode>
      <LayerEndTimestamp>0</LayerEndTimestamp>
      <LayerEndTriggerGroupOffset>0</LayerEndTriggerGroupOffset>
      <LayerLength>0</LayerLength>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>YT Chart</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>10</SortPriority>
      <SubMember>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>200b3f3c-3e60-4ba7-9749-9a2e67e093a5</Guid>
          <Name>Chart Style</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>false</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>c1e62f29-c753-4664-824c-6a12f46da1de</Guid>
              <Name>Chartzoom Style</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>b237af00-30a0-4aec-928c-308e1bb203f9</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>MeasurementMemberBase</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>true</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>MeasurementMemberBase</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <ForeColor>-14803426</ForeColor>
          <Guid>e6614012-5400-486b-8a04-32f90cea3e80</Guid>
          <Name>Overview Chart</Name>
          <OverviewVisible>false</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>MeasurementMemberBase</Title>
        </OverviewChart>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>86dedd07-9b8c-45dd-975a-807153fa866f</Guid>
          <Name>Axis Group</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <AbsoluteTimesFormat>HH:mm:ss.fff</AbsoluteTimesFormat>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>0a946b48-000d-4919-b0fc-e24d2126a75f</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <ShowAbsoluteTimes>None</ShowAbsoluteTimes>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>074372f8-f662-47e8-83d8-703a616dc7a9</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>None</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>MeasurementMemberBase</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>a13e6f8a-3758-4c13-b02f-ab7c1ac44f5a</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>10</ManualMax>
              <ManualMin>-10</ManualMin>
              <Name>Value Axis</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>f50ee81e-11a3-4038-b542-7074d54b40c3</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (1)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>AllChannels</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>MeasurementMemberBase</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Value Axis</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>72278faa-2412-4a93-8c97-ade20590e5f9</Guid>
              <Name>Marker Container</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MeasurementMemberBase</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16744448</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>116daddc-a9df-4b25-8389-7542edae5da8</Guid>
              <Name>iEncoderDegrees</Name>
              <SortPriority>10</SortPriority>
              <SubMember>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>9cc9be7c-fd6b-4ec5-988d-33c3d918bcad</Guid>
                  <Name>Channel Style</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16744448</DisplayColor>
                      <FillColor>838893568</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>0245259d-d0c9-41dc-9bcd-8b92f3290a04</Guid>
                      <LineWidth>2</LineWidth>
                      <MarkColor>-16744448</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>de0ae56b-1e3b-4ffc-a2c3-b9c185023606</Guid>
                      <Name>Min/Max Style</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>b1234e10-401c-43b2-8a9c-b3d1c9c8b004</Guid>
                      <Name>MeasurementMemberBase</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>MeasurementMemberBase</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
                <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DetailLevel>
                    <Int32>0</Int32>
                  </DetailLevel>
                  <DisplayColor>Black</DisplayColor>
                  <Guid>f8b428ec-9feb-41f2-9c6c-392533759228</Guid>
                  <Name>MeasurementMemberBase</Name>
                  <SortPriority>100</SortPriority>
                  <Title>MeasurementMemberBase</Title>
                  <UsedNameType>Acquisition</UsedNameType>
                </NameRelationInfo>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>6a964349-0480-4b88-addb-e54a78323fce</AcquisitionGUID>
                  <ArrayIndex>0</ArrayIndex>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>23aa5379-2cc4-451f-b9dc-1191be129661</Guid>
                  <Name>Y: iEncoderDegrees</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString></SourceUnitString>
                      <Symbol>1</Symbol>
                      <TargetUnitString></TargetUnitString>
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember>
                    <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DetailLevel>
                        <Int32>0</Int32>
                      </DetailLevel>
                      <DisplayColor>Black</DisplayColor>
                      <Guid>741db6ca-c45d-4c29-b65d-f0853645f55e</Guid>
                      <Name>MeasurementMemberBase</Name>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                      <UsedNameType>Acquisition</UsedNameType>
                    </NameRelationInfo>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
              </SubMember>
              <Title>MeasurementMemberBase</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
        <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <Guid>b5f284a9-ebde-4805-9dca-c0139c8401b0</Guid>
          <Name>Marker Container (3)</Name>
          <SortPriority>100</SortPriority>
          <SubMember />
          <Title>MeasurementMemberBase</Title>
        </MarkerContainer>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>MeasurementMemberBase</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
    <DataPool AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>1eec12e5-b798-4284-a4be-11abc838d9ce</Guid>
      <Name>DataPool</Name>
      <SortPriority>0</SortPriority>
      <SubMember>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>10.100.5.10.1.1</AmsNetId>
          <Area>None</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>50000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL64</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>1</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>6a964349-0480-4b88-addb-e54a78323fce</Guid>
          <IndexGroup>16448</IndexGroup>
          <IndexOffset>443960</IndexOffset>
          <IsEvent>false</IsEvent>
          <IsHistorical>false</IsHistorical>
          <IsTimeline>false</IsTimeline>
          <Name>iEncoderDegrees</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString></SourceUnitString>
              <Symbol>1</Symbol>
              <TargetUnitString></TargetUnitString>
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubAdsAcquisition />
          <SubMember>
            <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DetailLevel>
                <Int32>0</Int32>
              </DetailLevel>
              <DisplayColor>Black</DisplayColor>
              <Guid>9e59ec82-2ee0-4f26-ad1c-5b901df0fddd</Guid>
              <Name>MeasurementMemberBase</Name>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <UsedNameType>DetailLevel</UsedNameType>
            </NameRelationInfo>
          </SubMember>
          <SymbolBased>true</SymbolBased>
          <SymbolName>MAIN.iEncoderDegrees</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>MeasurementMemberBase</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>8</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>10.100.5.10.1.1</AmsNetId>
          <Area>Local</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>50000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL64</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>2</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>2fe280f1-1856-49ae-83d0-62d415fe0698</Guid>
          <IndexGroup>16448</IndexGroup>
          <IndexOffset>443968</IndexOffset>
          <IsEvent>false</IsEvent>
          <IsHistorical>false</IsHistorical>
          <IsTimeline>false</IsTimeline>
          <Name>CapacitiveDistance1</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString></SourceUnitString>
              <Symbol>1</Symbol>
              <TargetUnitString></TargetUnitString>
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubAdsAcquisition />
          <SubMember>
            <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DetailLevel>
                <Int32>0</Int32>
              </DetailLevel>
              <DisplayColor>Black</DisplayColor>
              <Guid>2c68c5c7-7a06-4ddb-966d-ddb6d9b4d85b</Guid>
              <Name>MeasurementMemberBase</Name>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <UsedNameType>DetailLevel</UsedNameType>
            </NameRelationInfo>
          </SubMember>
          <SymbolBased>true</SymbolBased>
          <SymbolName>MAIN.CapacitiveDistance1</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>MeasurementMemberBase</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>8</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>10.100.5.10.1.1</AmsNetId>
          <Area>Local</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>50000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL64</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>3</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>26d23e90-ec55-461e-a381-d2b3596faa4d</Guid>
          <IndexGroup>16448</IndexGroup>
          <IndexOffset>443976</IndexOffset>
          <IsEvent>false</IsEvent>
          <IsHistorical>false</IsHistorical>
          <IsTimeline>false</IsTimeline>
          <Name>CapacitiveDistance2</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString></SourceUnitString>
              <Symbol>1</Symbol>
              <TargetUnitString></TargetUnitString>
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubAdsAcquisition />
          <SubMember>
            <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DetailLevel>
                <Int32>0</Int32>
              </DetailLevel>
              <DisplayColor>Black</DisplayColor>
              <Guid>a4abba12-777b-425c-8170-4f74f3a40a5e</Guid>
              <Name>MeasurementMemberBase</Name>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <UsedNameType>DetailLevel</UsedNameType>
            </NameRelationInfo>
          </SubMember>
          <SymbolBased>true</SymbolBased>
          <SymbolName>MAIN.CapacitiveDistance2</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>MeasurementMemberBase</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>8</VariableSize>
        </AdsAcquisition>
      </SubMember>
      <Title>MeasurementMemberBase</Title>
    </DataPool>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-1118478</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-14803426</ForeColor>
      <Guid>dad457ad-e5ab-4b85-a67f-295675ccaf3b</Guid>
      <LayerEndConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</LayerEndConnectedTimeMemberGuid>
      <LayerEndTimeRefreshMode>NoTime</LayerEndTimeRefreshMode>
      <LayerEndTimestamp>0</LayerEndTimestamp>
      <LayerEndTriggerGroupOffset>0</LayerEndTriggerGroupOffset>
      <LayerLength>0</LayerLength>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>YT Chart (1)</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>11</SortPriority>
      <SubMember>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <ForeColor>-14803426</ForeColor>
          <Guid>a5dc94e1-0da4-43bd-8b72-43aa76bd6dc6</Guid>
          <Name>Overview Chart (1)</Name>
          <OverviewVisible>false</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>MeasurementMemberBase</Title>
        </OverviewChart>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>75508cbd-ee6f-4e62-8a9f-44dba35ce212</Guid>
          <Name>Chart Style (1)</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>false</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>75f26b0d-ff56-40cb-acda-f99881d46a55</Guid>
              <Name>Chartzoom Style (1)</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>89f4151f-376c-4c6e-bf21-c90d344e72fb</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style (1)</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>MeasurementMemberBase</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>true</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>MeasurementMemberBase</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <Guid>ab728044-78bc-4829-b6c1-e5130a71697c</Guid>
          <Name>Marker Container (1)</Name>
          <SortPriority>100</SortPriority>
          <SubMember />
          <Title>MeasurementMemberBase</Title>
        </MarkerContainer>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>f31029bd-7173-477e-bbe8-eed873523cf5</Guid>
          <Name>Axis Group (1)</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <AbsoluteTimesFormat>HH:mm:ss.fff</AbsoluteTimesFormat>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>cd99ad12-2628-438f-8c20-74a996dd9712</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis (1)</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <ShowAbsoluteTimes>None</ShowAbsoluteTimes>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>1d30ae60-adb7-4873-b97c-6d2708f65356</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (2)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>None</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>MeasurementMemberBase</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>89ec6f8d-1497-4178-bd78-ac00176aaf2f</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis (1)</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowOnly</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>5610ad40-2f66-4677-9d1c-f6b016f3b1ae</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (3)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>AllChannels</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>MeasurementMemberBase</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Value Axis</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>9e47f2df-99b9-42ee-b2c9-f03907463748</Guid>
              <Name>Marker Container (2)</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MeasurementMemberBase</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-23296</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>ad4186cc-2e37-49ee-a1c7-0685d238871b</Guid>
              <Name>CapacitiveDistance1</Name>
              <SortPriority>11</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>2fe280f1-1856-49ae-83d0-62d415fe0698</AcquisitionGUID>
                  <ArrayIndex>0</ArrayIndex>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>88253ca8-3ff6-45f9-8e03-df4b3ee65766</Guid>
                  <Name>Y: CapacitiveDistance1</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>1</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>micro</SourceUnitPrefix>
                      <SourceUnitString></SourceUnitString>
                      <Symbol>m</Symbol>
                      <TargetUnitString></TargetUnitString>
                      <TargetUnitValue>1</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>1</BaseUnitValue>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>micro</Prefix>
                      <ReturnText>µm (Length) </ReturnText>
                      <ScaleFactor>1E-06</ScaleFactor>
                      <Symbol>m</Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>Length</BaseName>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>1</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember>
                    <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DetailLevel>
                        <Int32>0</Int32>
                      </DetailLevel>
                      <DisplayColor>Black</DisplayColor>
                      <Guid>78229304-34f6-4973-a3da-b89406255550</Guid>
                      <Name>MeasurementMemberBase</Name>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                      <UsedNameType>Acquisition</UsedNameType>
                    </NameRelationInfo>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>6269f450-2887-4a62-abeb-ff39205d01ab</Guid>
                  <Name>Channel Style (2)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-23296</DisplayColor>
                      <FillColor>855614720</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>02c63e85-cd7c-449a-9543-b9a4ed9a4462</Guid>
                      <LineWidth>2</LineWidth>
                      <MarkColor>-23296</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (2)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>84e7f582-2778-4b64-aa2e-76cc31d217d9</Guid>
                      <Name>Min/Max Style (2)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>357a9cf4-1702-42d8-a581-4fdeb965023b</Guid>
                      <Name>MeasurementMemberBase (2)</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>MeasurementMemberBase</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
                <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DetailLevel>
                    <Int32>0</Int32>
                  </DetailLevel>
                  <DisplayColor>Black</DisplayColor>
                  <Guid>ce2e6b15-4084-41c2-8298-05cbfa614bd8</Guid>
                  <Name>MeasurementMemberBase</Name>
                  <SortPriority>100</SortPriority>
                  <Title>MeasurementMemberBase</Title>
                  <UsedNameType>Acquisition</UsedNameType>
                </NameRelationInfo>
              </SubMember>
              <Title>MeasurementMemberBase</Title>
            </Channel>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16711936</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>aff024ee-aa51-4b45-bf1a-9c5f3cdb7b39</Guid>
              <Name>CapacitiveDistance2</Name>
              <SortPriority>12</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>26d23e90-ec55-461e-a381-d2b3596faa4d</AcquisitionGUID>
                  <ArrayIndex>0</ArrayIndex>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>65d8faaa-6276-4dbf-9928-a876edff0fac</Guid>
                  <Name>Y: CapacitiveDistance2</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>1</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>micro</SourceUnitPrefix>
                      <SourceUnitString></SourceUnitString>
                      <Symbol>m</Symbol>
                      <TargetUnitString></TargetUnitString>
                      <TargetUnitValue>1</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>1</BaseUnitValue>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>micro</Prefix>
                      <ReturnText>µm (Length) </ReturnText>
                      <ScaleFactor>1E-06</ScaleFactor>
                      <Symbol>m</Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>Length</BaseName>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>1</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember>
                    <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DetailLevel>
                        <Int32>0</Int32>
                      </DetailLevel>
                      <DisplayColor>Black</DisplayColor>
                      <Guid>bc9e4527-db76-4326-bb00-22c3031927c9</Guid>
                      <Name>MeasurementMemberBase</Name>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                      <UsedNameType>Acquisition</UsedNameType>
                    </NameRelationInfo>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>4fc48b6f-a20e-4308-b1f9-18675fe9d160</Guid>
                  <Name>Channel Style (3)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16711936</DisplayColor>
                      <FillColor>838926080</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>cda48735-f11d-46f0-99a3-8e98a85bdbcd</Guid>
                      <LineWidth>2</LineWidth>
                      <MarkColor>-16711936</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (3)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>3fe6b07f-1fad-4e61-951f-dae3cf1525ce</Guid>
                      <Name>Min/Max Style (3)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>290a0841-4749-4f9d-842b-f50b921d321f</Guid>
                      <Name>MeasurementMemberBase (3)</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>MeasurementMemberBase</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
                <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DetailLevel>
                    <Int32>0</Int32>
                  </DetailLevel>
                  <DisplayColor>Black</DisplayColor>
                  <Guid>3827d382-29e8-4b34-89f5-23c2d95f3e89</Guid>
                  <Name>MeasurementMemberBase</Name>
                  <SortPriority>100</SortPriority>
                  <Title>MeasurementMemberBase</Title>
                  <UsedNameType>Acquisition</UsedNameType>
                </NameRelationInfo>
              </SubMember>
              <Title>MeasurementMemberBase</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>MeasurementMemberBase</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
  </SubMember>
  <SynchronisationMode>Default</SynchronisationMode>
  <TargetConnectionIds />
  <Title>MeasurementMemberBase</Title>
  <UseAutoSave>false</UseAutoSave>
  <UseFileStore>true</UseFileStore>
  <Version>1.0.0.5</Version>
  <ViewDetailLevel>Default</ViewDetailLevel>
</ScopeProject>",
            "CONFIG_PATH": "..\\ScopeControl\\ScopeWizard.tcscopex",
            "CONFIG_SOURCE": "project"
        },
        "HMI_Scope": {
            "AUTOSTART_RECORD": true,
            "CONFIG_FILE": "﻿<?xml version="1.0" encoding="utf-8"?>
<ScopeProject AssemblyName="TwinCAT.Measurement.Scope.API.Model">
  <ActiveWorkfolderPath>C:\Users\NavesM\source\repos\UT-202501\Database_Connection\ScopeControl\ScopeWizard 2028759600</ActiveWorkfolderPath>
  <AutoDeleteCapacity>0</AutoDeleteCapacity>
  <AutoDeleteMode>Disabled</AutoDeleteMode>
  <AutoDeleteOlderThan>0</AutoDeleteOlderThan>
  <AutoRestartRecord>false</AutoRestartRecord>
  <AutoSaveExportConfigurationString>&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;ExportConfiguration&gt;
  &lt;Silent&gt;False&lt;/Silent&gt;
  &lt;Format_Properties&gt;
	&lt;CSVProperties&gt;
	&lt;/CSVProperties&gt;
  &lt;/Format_Properties&gt;
&lt;/ExportConfiguration&gt;
</AutoSaveExportConfigurationString>
  <AutoSaveFileNameMask>{SCOPE}_AutoSave_{HH_mm_ss}</AutoSaveFileNameMask>
  <AutoSaveMode>None</AutoSaveMode>
  <AutoSavePath>$ScopeProject$\AutoSave</AutoSavePath>
  <Comment />
  <DisplayColor>Black</DisplayColor>
  <Guid>0b6e2a90-3082-4012-9684-43a73507a2b2</Guid>
  <HeadlessServer />
  <HeadlessServerConnectionId>00000000-0000-0000-0000-000000000000</HeadlessServerConnectionId>
  <ImageAutoDeleteCapacity>0</ImageAutoDeleteCapacity>
  <ImageAutoDeleteOlderThan>0</ImageAutoDeleteOlderThan>
  <ImagesDeleteMode>Disabled</ImagesDeleteMode>
  <KeepPreviousExports>false</KeepPreviousExports>
  <KeepPreviousImageExports>false</KeepPreviousImageExports>
  <Layout>&lt;?xml version="1.0" encoding="utf-16"?&gt;
&lt;Layout&gt;
  &lt;Window Guid="dad457ad-e5ab-4b85-a67f-295675ccaf3b" LastFocused="133954081517195207" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="e9ff3a2d-be7a-4b9e-b019-f5cd7415f066" DocumentIndexInWindowGroup="1" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;Window Guid="057d0495-d28b-49c0-995b-e854e77336f3" LastFocused="133954081544132847" DockedSize="200" PopupSize="0" FloatingLocation="-1, -1" FloatingSize="550, 400" LastOpenDockSituation="Document" LastFixedDockSituation="Document" LastFixedDockLocation="Right" LastFloatingWindowGuid="00000000-0000-0000-0000-000000000000" LastDockContainerCount="0" LastDockContainerIndex="0" DockedWorkingSize="250, 400" DockedWindowGroupGuid="00000000-0000-0000-0000-000000000000" DockedIndexInWindowGroup="0" DockedSplitPath="0" DocumentWorkingSize="250, 400" DocumentWindowGroupGuid="e9ff3a2d-be7a-4b9e-b019-f5cd7415f066" DocumentIndexInWindowGroup="0" DocumentSplitPath="0" FloatingWorkingSize="250, 400" FloatingWindowGroupGuid="00000000-0000-0000-0000-000000000000" FloatingIndexInWindowGroup="0" FloatingSplitPath="0" /&gt;
  &lt;DocumentContainer Dock="5"&gt;
    &lt;SplitLayoutSystem WorkingSize="250, 400" SplitMode="0"&gt;
      &lt;ControlLayoutSystem WorkingSize="250, 400" Guid="e9ff3a2d-be7a-4b9e-b019-f5cd7415f066" Collapsed="0" SelectedControl="057d0495-d28b-49c0-995b-e854e77336f3"&gt;
        &lt;Controls&gt;
          &lt;Control Guid="057d0495-d28b-49c0-995b-e854e77336f3" /&gt;
          &lt;Control Guid="dad457ad-e5ab-4b85-a67f-295675ccaf3b" /&gt;
        &lt;/Controls&gt;
      &lt;/ControlLayoutSystem&gt;
    &lt;/SplitLayoutSystem&gt;
  &lt;/DocumentContainer&gt;
&lt;/Layout&gt;</Layout>
  <MainServer>127.0.0.1.1.1</MainServer>
  <Name>Scope Project</Name>
  <RecordTime>36000000000</RecordTime>
  <ServerVersions>
    <Version>4.49.94.0</Version>
  </ServerVersions>
  <SortPriority>100</SortPriority>
  <StopMode>AutoStop</StopMode>
  <SubMember>
    <TriggerModule AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>d09f04a3-13e8-4951-be35-27cdd8b848f9</Guid>
      <Name>Trigger</Name>
      <SortPriority>10000</SortPriority>
      <SubMember />
      <Title>MeasurementMemberBase</Title>
    </TriggerModule>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-1118478</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-14803426</ForeColor>
      <Guid>057d0495-d28b-49c0-995b-e854e77336f3</Guid>
      <LayerEndConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</LayerEndConnectedTimeMemberGuid>
      <LayerEndTimeRefreshMode>NoTime</LayerEndTimeRefreshMode>
      <LayerEndTimestamp>0</LayerEndTimestamp>
      <LayerEndTriggerGroupOffset>0</LayerEndTriggerGroupOffset>
      <LayerLength>0</LayerLength>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>YT Chart</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>10</SortPriority>
      <SubMember>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>200b3f3c-3e60-4ba7-9749-9a2e67e093a5</Guid>
          <Name>Chart Style</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>false</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>c1e62f29-c753-4664-824c-6a12f46da1de</Guid>
              <Name>Chartzoom Style</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>b237af00-30a0-4aec-928c-308e1bb203f9</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>MeasurementMemberBase</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>true</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>MeasurementMemberBase</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <ForeColor>-14803426</ForeColor>
          <Guid>e6614012-5400-486b-8a04-32f90cea3e80</Guid>
          <Name>Overview Chart</Name>
          <OverviewVisible>false</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>MeasurementMemberBase</Title>
        </OverviewChart>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>86dedd07-9b8c-45dd-975a-807153fa866f</Guid>
          <Name>Axis Group</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <AbsoluteTimesFormat>HH:mm:ss.fff</AbsoluteTimesFormat>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>0a946b48-000d-4919-b0fc-e24d2126a75f</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <ShowAbsoluteTimes>None</ShowAbsoluteTimes>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>074372f8-f662-47e8-83d8-703a616dc7a9</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>None</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>MeasurementMemberBase</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>a13e6f8a-3758-4c13-b02f-ab7c1ac44f5a</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>10</ManualMax>
              <ManualMin>-10</ManualMin>
              <Name>Value Axis</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>f50ee81e-11a3-4038-b542-7074d54b40c3</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (1)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>AllChannels</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>MeasurementMemberBase</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Value Axis</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>72278faa-2412-4a93-8c97-ade20590e5f9</Guid>
              <Name>Marker Container</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MeasurementMemberBase</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16744448</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>116daddc-a9df-4b25-8389-7542edae5da8</Guid>
              <Name>iEncoderDegrees</Name>
              <SortPriority>10</SortPriority>
              <SubMember>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>9cc9be7c-fd6b-4ec5-988d-33c3d918bcad</Guid>
                  <Name>Channel Style</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16744448</DisplayColor>
                      <FillColor>838893568</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>0245259d-d0c9-41dc-9bcd-8b92f3290a04</Guid>
                      <LineWidth>2</LineWidth>
                      <MarkColor>-16744448</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>de0ae56b-1e3b-4ffc-a2c3-b9c185023606</Guid>
                      <Name>Min/Max Style</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>b1234e10-401c-43b2-8a9c-b3d1c9c8b004</Guid>
                      <Name>MeasurementMemberBase</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>MeasurementMemberBase</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
                <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DetailLevel>
                    <Int32>0</Int32>
                  </DetailLevel>
                  <DisplayColor>Black</DisplayColor>
                  <Guid>f8b428ec-9feb-41f2-9c6c-392533759228</Guid>
                  <Name>MeasurementMemberBase</Name>
                  <SortPriority>100</SortPriority>
                  <Title>MeasurementMemberBase</Title>
                  <UsedNameType>Acquisition</UsedNameType>
                </NameRelationInfo>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>6a964349-0480-4b88-addb-e54a78323fce</AcquisitionGUID>
                  <ArrayIndex>0</ArrayIndex>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>23aa5379-2cc4-451f-b9dc-1191be129661</Guid>
                  <Name>Y: iEncoderDegrees</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>none</SourceUnitPrefix>
                      <SourceUnitString></SourceUnitString>
                      <Symbol>1</Symbol>
                      <TargetUnitString></TargetUnitString>
                      <TargetUnitValue>0</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ReturnText> (None) </ReturnText>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>UnitOfOne</BaseName>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>0</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember>
                    <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DetailLevel>
                        <Int32>0</Int32>
                      </DetailLevel>
                      <DisplayColor>Black</DisplayColor>
                      <Guid>741db6ca-c45d-4c29-b65d-f0853645f55e</Guid>
                      <Name>MeasurementMemberBase</Name>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                      <UsedNameType>Acquisition</UsedNameType>
                    </NameRelationInfo>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
              </SubMember>
              <Title>MeasurementMemberBase</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
        <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <Guid>b5f284a9-ebde-4805-9dca-c0139c8401b0</Guid>
          <Name>Marker Container (3)</Name>
          <SortPriority>100</SortPriority>
          <SubMember />
          <Title>MeasurementMemberBase</Title>
        </MarkerContainer>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>MeasurementMemberBase</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
    <DataPool AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <Comment />
      <DisplayColor>Black</DisplayColor>
      <Guid>1eec12e5-b798-4284-a4be-11abc838d9ce</Guid>
      <Name>DataPool</Name>
      <SortPriority>0</SortPriority>
      <SubMember>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>10.100.5.10.1.1</AmsNetId>
          <Area>None</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>50000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL64</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>1</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>6a964349-0480-4b88-addb-e54a78323fce</Guid>
          <IndexGroup>16448</IndexGroup>
          <IndexOffset>443960</IndexOffset>
          <IsEvent>false</IsEvent>
          <IsHistorical>false</IsHistorical>
          <IsTimeline>false</IsTimeline>
          <Name>iEncoderDegrees</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString></SourceUnitString>
              <Symbol>1</Symbol>
              <TargetUnitString></TargetUnitString>
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubAdsAcquisition />
          <SubMember>
            <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DetailLevel>
                <Int32>0</Int32>
              </DetailLevel>
              <DisplayColor>Black</DisplayColor>
              <Guid>9e59ec82-2ee0-4f26-ad1c-5b901df0fddd</Guid>
              <Name>MeasurementMemberBase</Name>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <UsedNameType>DetailLevel</UsedNameType>
            </NameRelationInfo>
          </SubMember>
          <SymbolBased>true</SymbolBased>
          <SymbolName>MAIN.iEncoderDegrees</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>MeasurementMemberBase</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>8</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>10.100.5.10.1.1</AmsNetId>
          <Area>Local</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>50000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL64</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>2</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>2fe280f1-1856-49ae-83d0-62d415fe0698</Guid>
          <IndexGroup>16448</IndexGroup>
          <IndexOffset>443968</IndexOffset>
          <IsEvent>false</IsEvent>
          <IsHistorical>false</IsHistorical>
          <IsTimeline>false</IsTimeline>
          <Name>CapacitiveDistance1</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString></SourceUnitString>
              <Symbol>1</Symbol>
              <TargetUnitString></TargetUnitString>
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubAdsAcquisition />
          <SubMember>
            <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DetailLevel>
                <Int32>0</Int32>
              </DetailLevel>
              <DisplayColor>Black</DisplayColor>
              <Guid>2c68c5c7-7a06-4ddb-966d-ddb6d9b4d85b</Guid>
              <Name>MeasurementMemberBase</Name>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <UsedNameType>DetailLevel</UsedNameType>
            </NameRelationInfo>
          </SubMember>
          <SymbolBased>true</SymbolBased>
          <SymbolName>MAIN.CapacitiveDistance1</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>MeasurementMemberBase</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>8</VariableSize>
        </AdsAcquisition>
        <AdsAcquisition AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <AmsNetId>10.100.5.10.1.1</AmsNetId>
          <Area>Local</Area>
          <ArrayLength>0</ArrayLength>
          <BaseSampleTime>50000</BaseSampleTime>
          <ChannelStyleInformation />
          <Comment></Comment>
          <CompressionMode>Uncompressed</CompressionMode>
          <ContextMask>0</ContextMask>
          <DataAccess>
            <DataAccessMode>
              <Source>TwinCAT</Source>
              <Protocoll>ADS</Protocoll>
              <Format>TcBinary</Format>
              <TimeContext>Present</TimeContext>
              <TimeTangeInfo>
                <StartTimeStamp>0</StartTimeStamp>
                <EndTimeStamp>0</EndTimeStamp>
              </TimeTangeInfo>
            </DataAccessMode>
          </DataAccess>
          <DataType>REAL64</DataType>
          <DisplayColor>Black</DisplayColor>
          <Enabled>true</Enabled>
          <FileHandle>3</FileHandle>
          <ForceOversampling>false</ForceOversampling>
          <Guid>26d23e90-ec55-461e-a381-d2b3596faa4d</Guid>
          <IndexGroup>16448</IndexGroup>
          <IndexOffset>443976</IndexOffset>
          <IsEvent>false</IsEvent>
          <IsHistorical>false</IsHistorical>
          <IsTimeline>false</IsTimeline>
          <Name>CapacitiveDistance2</Name>
          <Oversample>0</Oversample>
          <RawUnit>
            <Transformation>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <ScaleFactor>1</ScaleFactor>
              <SourceUnitPrefix>none</SourceUnitPrefix>
              <SourceUnitString></SourceUnitString>
              <Symbol>1</Symbol>
              <TargetUnitString></TargetUnitString>
              <TargetUnitValue>0</TargetUnitValue>
            </Transformation>
            <Unit>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ReturnText> (None) </ReturnText>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
            </Unit>
            <UnitOffsetResult>0</UnitOffsetResult>
            <UnitScaleResult>1</UnitScaleResult>
            <UserUnit>
              <BaseName>UnitOfOne</BaseName>
              <BaseUnitString></BaseUnitString>
              <BaseUnitValue>0</BaseUnitValue>
              <Name>None</Name>
              <NameExtension></NameExtension>
              <Offset>0</Offset>
              <Prefix>none</Prefix>
              <ScaleFactor>1</ScaleFactor>
              <Symbol></Symbol>
              <UserPrefix>none</UserPrefix>
            </UserUnit>
          </RawUnit>
          <SaveOption>IncludeDataInSVDX</SaveOption>
          <ServerHandle>0</ServerHandle>
          <SortPriority>10</SortPriority>
          <SubAdsAcquisition />
          <SubMember>
            <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DetailLevel>
                <Int32>0</Int32>
              </DetailLevel>
              <DisplayColor>Black</DisplayColor>
              <Guid>a4abba12-777b-425c-8170-4f74f3a40a5e</Guid>
              <Name>MeasurementMemberBase</Name>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <UsedNameType>DetailLevel</UsedNameType>
            </NameRelationInfo>
          </SubMember>
          <SymbolBased>true</SymbolBased>
          <SymbolName>MAIN.CapacitiveDistance2</SymbolName>
          <TargetPort>851</TargetPort>
          <TimeOffset>0</TimeOffset>
          <Title>MeasurementMemberBase</Title>
          <UseLocalServer>true</UseLocalServer>
          <UseTaskSampleTime>true</UseTaskSampleTime>
          <UTF8Encoding>false</UTF8Encoding>
          <VariableSize>8</VariableSize>
        </AdsAcquisition>
      </SubMember>
      <Title>MeasurementMemberBase</Title>
    </DataPool>
    <YTChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
      <AnchorTimestamp>0</AnchorTimestamp>
      <AssignedCore>0</AssignedCore>
      <AutoStart>true</AutoStart>
      <Comment />
      <ConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</ConnectedTimeMemberGuid>
      <DefaultDisplayWidth>100000000</DefaultDisplayWidth>
      <DisplayColor>-1118478</DisplayColor>
      <DisplayOverwriteMode>false</DisplayOverwriteMode>
      <DurationLength>0</DurationLength>
      <ForeColor>-14803426</ForeColor>
      <Guid>dad457ad-e5ab-4b85-a67f-295675ccaf3b</Guid>
      <LayerEndConnectedTimeMemberGuid>00000000-0000-0000-0000-000000000000</LayerEndConnectedTimeMemberGuid>
      <LayerEndTimeRefreshMode>NoTime</LayerEndTimeRefreshMode>
      <LayerEndTimestamp>0</LayerEndTimestamp>
      <LayerEndTriggerGroupOffset>0</LayerEndTriggerGroupOffset>
      <LayerLength>0</LayerLength>
      <MasterChart>00000000-0000-0000-0000-000000000000</MasterChart>
      <Name>YT Chart (1)</Name>
      <ShowImageChart>false</ShowImageChart>
      <SortPriority>11</SortPriority>
      <SubMember>
        <OverviewChart AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <ForeColor>-14803426</ForeColor>
          <Guid>a5dc94e1-0da4-43bd-8b72-43aa76bd6dc6</Guid>
          <Name>Overview Chart (1)</Name>
          <OverviewVisible>false</OverviewVisible>
          <SortPriority>100</SortPriority>
          <Title>MeasurementMemberBase</Title>
        </OverviewChart>
        <ChartStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <GradientBackground>1</GradientBackground>
          <Guid>75508cbd-ee6f-4e62-8a9f-44dba35ce212</Guid>
          <Name>Chart Style (1)</Name>
          <ShowName>false</ShowName>
          <SortPriority>100</SortPriority>
          <StackedAxes>false</StackedAxes>
          <SubMember>
            <ChartZoomStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>75f26b0d-ff56-40cb-acda-f99881d46a55</Guid>
              <Name>Chartzoom Style (1)</Name>
              <ScaleOnZoom>true</ScaleOnZoom>
              <SortPriority>100</SortPriority>
              <Title>MeasurementMemberBase</Title>
              <YZoom>true</YZoom>
            </ChartZoomStyle>
            <ChartMenuStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <ButtonSize>
                <Height>16</Height>
                <Width>16</Width>
              </ButtonSize>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <EnabledButtons>RunButton PauseButton Splitter1 DisplaywidthTextBox Splitter2 ScrollBackBig ScrollBackSmall ScrollForwardSmall ScrollForwardBig Splitter3 PositionTextBox Splitter4 UndoButton RedoButton Splitter5 PanXButton PanXYButton ZoomXButton ZoomXYButton UnzoomButton ZoomOutMaxButton OverviewButton CopyToClipboard OpenCurveCreatorButton</EnabledButtons>
              <EnabledTimeLabels>All</EnabledTimeLabels>
              <Guid>89f4151f-376c-4c6e-bf21-c90d344e72fb</Guid>
              <IndexNavigation>false</IndexNavigation>
              <Name>Chartmenu Style (1)</Name>
              <SortPriority>100</SortPriority>
              <TimeStripFontSize>8.25</TimeStripFontSize>
              <Title>MeasurementMemberBase</Title>
              <ToolStripFontSize>8.25</ToolStripFontSize>
              <UseLongTimeFormat>true</UseLongTimeFormat>
              <VisibleTimeStrip>true</VisibleTimeStrip>
              <VisibleToolStrip>true</VisibleToolStrip>
            </ChartMenuStyle>
          </SubMember>
          <Title>MeasurementMemberBase</Title>
          <ToolTipEnabled>true</ToolTipEnabled>
        </ChartStyle>
        <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <Comment />
          <DisplayColor>Black</DisplayColor>
          <Guid>ab728044-78bc-4829-b6c1-e5130a71697c</Guid>
          <Name>Marker Container (1)</Name>
          <SortPriority>100</SortPriority>
          <SubMember />
          <Title>MeasurementMemberBase</Title>
        </MarkerContainer>
        <AxisGroup AssemblyName="TwinCAT.Measurement.Scope.API.Model">
          <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
          <Comment />
          <DisplayColor>-657931</DisplayColor>
          <Enabled>true</Enabled>
          <Guid>f31029bd-7173-477e-bbe8-eed873523cf5</Guid>
          <Name>Axis Group (1)</Name>
          <ShowTitle>False</ShowTitle>
          <SortPriority>10</SortPriority>
          <SubMember>
            <TimeAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <AbsoluteTimesFormat>HH:mm:ss.fff</AbsoluteTimesFormat>
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>cd99ad12-2628-438f-8c20-74a996dd9712</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>100000000</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Time Axis (1)</Name>
              <Orientation>X</Orientation>
              <ScalingMode>MinMax</ScalingMode>
              <ShowAbsoluteTimes>None</ShowAbsoluteTimes>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>1d30ae60-adb7-4873-b97c-6d2708f65356</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (2)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>None</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>MeasurementMemberBase</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Time Axis</Title>
            </TimeAxis>
            <ValueAxis AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>89ec6f8d-1497-4178-bd78-ac00176aaf2f</Guid>
              <Inverted>false</Inverted>
              <Logarithmic>false</Logarithmic>
              <ManualMax>0.5</ManualMax>
              <ManualMin>-0.5</ManualMin>
              <Name>Value Axis (1)</Name>
              <Orientation>Y</Orientation>
              <ScalingMode>AutoGrowOnly</ScalingMode>
              <SortPriority>100</SortPriority>
              <SubMember>
                <AxisStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <ChannelRelatedGuid>00000000-0000-0000-0000-000000000000</ChannelRelatedGuid>
                  <ColorMode>CustomColor</ColorMode>
                  <Comment />
                  <DisplayColor>-14803426</DisplayColor>
                  <Grid>true</Grid>
                  <GridColor>-14803426</GridColor>
                  <GridDivisions>10</GridDivisions>
                  <GridLineWidth>1</GridLineWidth>
                  <Guid>5610ad40-2f66-4677-9d1c-f6b016f3b1ae</Guid>
                  <LineWidth>1</LineWidth>
                  <Name>Axis Style (3)</Name>
                  <Precision>6</Precision>
                  <ShowName>False</ShowName>
                  <ShowUnit>AllChannels</ShowUnit>
                  <SortPriority>100</SortPriority>
                  <SubGrid>false</SubGrid>
                  <SubGridDivisions>5</SubGridDivisions>
                  <Title>MeasurementMemberBase</Title>
                  <UseScientificNotation>true</UseScientificNotation>
                  <Visible>true</Visible>
                </AxisStyle>
              </SubMember>
              <Title>Value Axis</Title>
            </ValueAxis>
            <MarkerContainer AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>Black</DisplayColor>
              <Guid>9e47f2df-99b9-42ee-b2c9-f03907463748</Guid>
              <Name>Marker Container (2)</Name>
              <SortPriority>100</SortPriority>
              <SubMember />
              <Title>MeasurementMemberBase</Title>
            </MarkerContainer>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-23296</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>ad4186cc-2e37-49ee-a1c7-0685d238871b</Guid>
              <Name>CapacitiveDistance1</Name>
              <SortPriority>11</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>2fe280f1-1856-49ae-83d0-62d415fe0698</AcquisitionGUID>
                  <ArrayIndex>0</ArrayIndex>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>88253ca8-3ff6-45f9-8e03-df4b3ee65766</Guid>
                  <Name>Y: CapacitiveDistance1</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>1</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>micro</SourceUnitPrefix>
                      <SourceUnitString></SourceUnitString>
                      <Symbol>m</Symbol>
                      <TargetUnitString></TargetUnitString>
                      <TargetUnitValue>1</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>1</BaseUnitValue>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>micro</Prefix>
                      <ReturnText>µm (Length) </ReturnText>
                      <ScaleFactor>1E-06</ScaleFactor>
                      <Symbol>m</Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>Length</BaseName>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>1</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember>
                    <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DetailLevel>
                        <Int32>0</Int32>
                      </DetailLevel>
                      <DisplayColor>Black</DisplayColor>
                      <Guid>78229304-34f6-4973-a3da-b89406255550</Guid>
                      <Name>MeasurementMemberBase</Name>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                      <UsedNameType>Acquisition</UsedNameType>
                    </NameRelationInfo>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>6269f450-2887-4a62-abeb-ff39205d01ab</Guid>
                  <Name>Channel Style (2)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-23296</DisplayColor>
                      <FillColor>855614720</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>02c63e85-cd7c-449a-9543-b9a4ed9a4462</Guid>
                      <LineWidth>2</LineWidth>
                      <MarkColor>-23296</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (2)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>84e7f582-2778-4b64-aa2e-76cc31d217d9</Guid>
                      <Name>Min/Max Style (2)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>357a9cf4-1702-42d8-a581-4fdeb965023b</Guid>
                      <Name>MeasurementMemberBase (2)</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>MeasurementMemberBase</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
                <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DetailLevel>
                    <Int32>0</Int32>
                  </DetailLevel>
                  <DisplayColor>Black</DisplayColor>
                  <Guid>ce2e6b15-4084-41c2-8298-05cbfa614bd8</Guid>
                  <Name>MeasurementMemberBase</Name>
                  <SortPriority>100</SortPriority>
                  <Title>MeasurementMemberBase</Title>
                  <UsedNameType>Acquisition</UsedNameType>
                </NameRelationInfo>
              </SubMember>
              <Title>MeasurementMemberBase</Title>
            </Channel>
            <Channel AssemblyName="TwinCAT.Measurement.Scope.API.Model">
              <Comment />
              <DisplayColor>-16711936</DisplayColor>
              <Enabled>true</Enabled>
              <Guid>aff024ee-aa51-4b45-bf1a-9c5f3cdb7b39</Guid>
              <Name>CapacitiveDistance2</Name>
              <SortPriority>12</SortPriority>
              <SubMember>
                <AcquisitionInterpreter AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <AcquisitionGUID>26d23e90-ec55-461e-a381-d2b3596faa4d</AcquisitionGUID>
                  <ArrayIndex>0</ArrayIndex>
                  <BitMask>18446744073709551615</BitMask>
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>65d8faaa-6276-4dbf-9928-a876edff0fac</Guid>
                  <Name>Y: CapacitiveDistance2</Name>
                  <Offset>0</Offset>
                  <ResultingUnit>
                    <Transformation>
                      <BaseUnitValue>1</BaseUnitValue>
                      <Name>None</Name>
                      <ScaleFactor>1</ScaleFactor>
                      <SourceUnitPrefix>micro</SourceUnitPrefix>
                      <SourceUnitString></SourceUnitString>
                      <Symbol>m</Symbol>
                      <TargetUnitString></TargetUnitString>
                      <TargetUnitValue>1</TargetUnitValue>
                    </Transformation>
                    <Unit>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>1</BaseUnitValue>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>micro</Prefix>
                      <ReturnText>µm (Length) </ReturnText>
                      <ScaleFactor>1E-06</ScaleFactor>
                      <Symbol>m</Symbol>
                    </Unit>
                    <UnitOffsetResult>0</UnitOffsetResult>
                    <UnitScaleResult>1</UnitScaleResult>
                    <UserUnit>
                      <BaseName>Length</BaseName>
                      <BaseUnitString></BaseUnitString>
                      <BaseUnitValue>1</BaseUnitValue>
                      <Name>None</Name>
                      <NameExtension></NameExtension>
                      <Offset>0</Offset>
                      <Prefix>none</Prefix>
                      <ScaleFactor>1</ScaleFactor>
                      <Symbol></Symbol>
                      <UserPrefix>none</UserPrefix>
                    </UserUnit>
                  </ResultingUnit>
                  <ScaleFactor>1</ScaleFactor>
                  <ShortInfo />
                  <SortPriority>2</SortPriority>
                  <SubMember>
                    <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DetailLevel>
                        <Int32>0</Int32>
                      </DetailLevel>
                      <DisplayColor>Black</DisplayColor>
                      <Guid>bc9e4527-db76-4326-bb00-22c3031927c9</Guid>
                      <Name>MeasurementMemberBase</Name>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                      <UsedNameType>Acquisition</UsedNameType>
                    </NameRelationInfo>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Usage>Y</Usage>
                </AcquisitionInterpreter>
                <ChannelStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DisplayColor>Black</DisplayColor>
                  <Guid>4fc48b6f-a20e-4308-b1f9-18675fe9d160</Guid>
                  <Name>Channel Style (3)</Name>
                  <SortPriority>100</SortPriority>
                  <SubMember>
                    <SeriesStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Antialias>true</Antialias>
                      <Comment />
                      <DisplayColor>-16711936</DisplayColor>
                      <FillColor>838926080</FillColor>
                      <FillMode>None</FillMode>
                      <Guid>cda48735-f11d-46f0-99a3-8e98a85bdbcd</Guid>
                      <LineWidth>2</LineWidth>
                      <MarkColor>-16711936</MarkColor>
                      <MarkSize>2</MarkSize>
                      <MarkState>Auto</MarkState>
                      <Name>Series Style (3)</Name>
                      <SeriesType>Line</SeriesType>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </SeriesStyle>
                    <MinMaxStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>3fe6b07f-1fad-4e61-951f-dae3cf1525ce</Guid>
                      <Name>Min/Max Style (3)</Name>
                      <ShowMax>false</ShowMax>
                      <ShowMin>false</ShowMin>
                      <SortPriority>100</SortPriority>
                      <Title>MeasurementMemberBase</Title>
                    </MinMaxStyle>
                    <TimeShiftStyle AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                      <Comment />
                      <DisplayColor>Black</DisplayColor>
                      <Guid>290a0841-4749-4f9d-842b-f50b921d321f</Guid>
                      <Name>MeasurementMemberBase (3)</Name>
                      <SortPriority>100</SortPriority>
                      <TimeShift>0</TimeShift>
                      <Title>MeasurementMemberBase</Title>
                    </TimeShiftStyle>
                  </SubMember>
                  <Title>MeasurementMemberBase</Title>
                  <Visible>true</Visible>
                </ChannelStyle>
                <NameRelationInfo AssemblyName="TwinCAT.Measurement.Scope.API.Model">
                  <Comment />
                  <DetailLevel>
                    <Int32>0</Int32>
                  </DetailLevel>
                  <DisplayColor>Black</DisplayColor>
                  <Guid>3827d382-29e8-4b34-89f5-23c2d95f3e89</Guid>
                  <Name>MeasurementMemberBase</Name>
                  <SortPriority>100</SortPriority>
                  <Title>MeasurementMemberBase</Title>
                  <UsedNameType>Acquisition</UsedNameType>
                </NameRelationInfo>
              </SubMember>
              <Title>MeasurementMemberBase</Title>
            </Channel>
          </SubMember>
          <Title>Axis Group</Title>
        </AxisGroup>
      </SubMember>
      <TimeOffset>0</TimeOffset>
      <TimeRefreshMode>Explicit</TimeRefreshMode>
      <Title>MeasurementMemberBase</Title>
      <TriggerGroupOffset>0</TriggerGroupOffset>
    </YTChart>
  </SubMember>
  <SynchronisationMode>Default</SynchronisationMode>
  <TargetConnectionIds />
  <Title>MeasurementMemberBase</Title>
  <UseAutoSave>false</UseAutoSave>
  <UseFileStore>true</UseFileStore>
  <Version>1.0.0.5</Version>
  <ViewDetailLevel>Default</ViewDetailLevel>
</ScopeProject>",
            "CONFIG_PATH": "..\\ScopeControl\\ScopeWizard.tcscopex",
            "CONFIG_SOURCE": "project"
        }
    },
    "scopeRecords": []
}