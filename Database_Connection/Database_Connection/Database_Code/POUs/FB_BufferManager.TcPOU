<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_BufferManager" Id="{2e89b9d7-875b-42cb-8122-42a5f35fb258}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_BufferManager
VAR_INPUT
    SampleDone : BOOL;
	SampleTrigger : BOOL;
    SampleNr : INT;
    MeasurementNr : INT;
    EncoderValue : UDINT;
    Cap1Value : INT;
    Cap2Value : INT;
END_VAR
VAR
    // Buffer data
    nWriteIndex       : INT := 0;
    nWriteBufferIndex : INT := 0;
    nInsertIdx        : INT := 0;
    nSQLIndex         : INT := 0;
    InsertState       : INT := 0;
    InsertTriggered   : BOOL := FALSE;
    iSensorIDs : ARRAY[1..2] OF INT := [1,2];
	
    // SQL
    FB_SQLCommandEvt  : FB_SQLCommandEvt(sNetID := sLocalID, tTimeout := T#10S);
	FB_SQLDatabaseEvt : FB_SQLDatabaseEvt(sNetID := sLocalID, tTimeout := T#10S);
    SQL_Commands : ARRAY[1..10] OF STRING(500);
	DataBase_Connection: BOOL := FALSE;
	
	bAllInserted: BOOL;
	idx: INT;
END_VAR
VAR_OUTPUT
	bInsertingData: BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//make connection to the database
IF NOT DataBase_Connection THEN
    FB_SQLDatabaseEvt.Connect(hDBID := 1);  // Attempt to connect

    // Wait until the connection is established
    IF FB_SQLDatabaseEvt.bConnected THEN
        FB_SQLDatabaseEvt.CreateCmd(pSQLCommand := ADR(FB_SQLCommandEvt));
        DataBase_Connection := TRUE;
    END_IF;

END_IF


// Handle sampling trigger
IF  NOT SampleDone AND SampleTrigger  THEN
    g_aSensorBuffer[nWriteBufferIndex, nWriteIndex].SampleNumber  := SampleNr;
    g_aSensorBuffer[nWriteBufferIndex, nWriteIndex].MeasurementNr := MeasurementNr;
    g_aSensorBuffer[nWriteBufferIndex, nWriteIndex].EncoderValue  := EncoderConvert(EncoderValue);
    g_aSensorBuffer[nWriteBufferIndex, nWriteIndex].Cap1Value     := CapacitiveConvert(Cap1Value);
    g_aSensorBuffer[nWriteBufferIndex, nWriteIndex].Cap2Value     := CapacitiveConvert(Cap2Value);
	
    nWriteIndex := nWriteIndex + 1;
	
	
    IF nWriteIndex > g_aSensorBufferSize THEN
   		 	nWriteIndex := 0;
    		g_aWriteSQL[nWriteBufferIndex] := TRUE;

    		nWriteBufferIndex := nWriteBufferIndex + 1;
    		IF nWriteBufferIndex >= g_aSensorBuffers THEN
       		   nWriteBufferIndex := 0;
    		END_IF
		END_IF
		
END_IF

// Handle insertion if SampleDone
    IF g_aWriteSQL[nSQLIndex]  AND  SampleDone THEN
		bInsertingData := TRUE; // Set flag when starting insertion
        CASE InsertState OF
        0: // Insert encoder
            IF NOT InsertTriggered THEN
                SQL_Commands[2] := FC_SQL_InsertCommands_Encoder(
                    g_aSensorBuffer[nSQLIndex, nInsertIdx].EncoderValue,
                    g_aSensorBuffer[nSQLIndex, nInsertIdx].SampleNumber,
                    g_aSensorBuffer[nSQLIndex, nInsertIdx].MeasurementNr
                );
                InsertTriggered := FB_SQLCommandEvt.Execute(
                    pSQLCmd := ADR(SQL_Commands[2]),
                    cbSQLCmd := SIZEOF(SQL_Commands[2])
                );
            ELSIF NOT FB_SQLCommandEvt.bBusy THEN
                InsertState := 1;
                InsertTriggered := FALSE;
            END_IF

        1: // Insert Cap1
            IF NOT InsertTriggered THEN
                SQL_Commands[5] := FC_SQL_InsertCommands_Capacitief(
                    g_aSensorBuffer[nSQLIndex, nInsertIdx].Cap1Value,
                    g_aSensorBuffer[nSQLIndex, nInsertIdx].SampleNumber,
                    iSensorIDs[1],
                    g_aSensorBuffer[nSQLIndex, nInsertIdx].MeasurementNr
                );
                InsertTriggered := FB_SQLCommandEvt.Execute(
                    pSQLCmd := ADR(SQL_Commands[5]),
                    cbSQLCmd := SIZEOF(SQL_Commands[5])
                );
            ELSIF NOT FB_SQLCommandEvt.bBusy THEN
                InsertState := 2;
                InsertTriggered := FALSE;
            END_IF

        2: // Insert Cap2
            IF NOT InsertTriggered THEN
                SQL_Commands[6] := FC_SQL_InsertCommands_Capacitief(
                    g_aSensorBuffer[nSQLIndex, nInsertIdx].Cap2Value,
                    g_aSensorBuffer[nSQLIndex, nInsertIdx].SampleNumber,
                    iSensorIDs[2],
                    g_aSensorBuffer[nSQLIndex, nInsertIdx].MeasurementNr
                );
                InsertTriggered := FB_SQLCommandEvt.Execute(
                    pSQLCmd := ADR(SQL_Commands[6]),
                    cbSQLCmd := SIZEOF(SQL_Commands[6])
                );
            ELSIF NOT FB_SQLCommandEvt.bBusy THEN
                InsertState := 3;
                InsertTriggered := FALSE;
            END_IF
          
        3:
           IF NOT FB_SQLCommandEvt.bBusy THEN
                nInsertIdx := nInsertIdx + 1;
				
                IF nInsertIdx > g_aSensorBufferSize  THEN
                    nInsertIdx := 0;
                    g_aWriteSQL[nSQLIndex] := FALSE;
                    nSQLIndex := nSQLIndex + 1;
                    IF nSQLIndex > nWriteBufferIndex  THEN
                        nSQLIndex := 0;
						
                    END_IF
				
                END_IF

                InsertState := 0;
                InsertTriggered := FALSE;
            END_IF



        END_CASE
    END_IF
(* Check if any write flags are still set *)
bAllInserted := TRUE;
FOR idx := 0 TO g_aSensorBuffers - 1 DO
    IF g_aWriteSQL[idx] THEN
        bAllInserted := FALSE;
        EXIT;
    END_IF
END_FOR

(* If done inserting everything *)
IF bAllInserted AND NOT FB_SQLCommandEvt.bBusy THEN
    bInsertingData := FALSE;
	//IF SampleDone THEN
     //Clear buffers now if not already cleared
      // MEMSET(Destaddr := ADR(g_aSensorBuffer), n := SIZEOF(g_aSensorBuffer), FillByte := 0);
      // MEMSET(Destaddr := ADR(g_aWriteSQL), n := SIZEOF(g_aWriteSQL), FillByte := 0);
	//END_IF
END_IF]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>